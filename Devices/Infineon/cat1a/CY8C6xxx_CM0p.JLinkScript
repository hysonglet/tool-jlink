/*********************************************************************
*            (c) 1995 - 2018 SEGGER Microcontroller GmbH             *
*                        The Embedded Experts                        *
*                           www.segger.com                           *
**********************************************************************

-------------------------- END-OF-HEADER -----------------------------

File    : CY8C6xxx_CM0p_tm.JLinkScript
Purpose : J-Link script file for Infineon PSoC6A-1M/2M/512K/256K (CY8C6xxx)
Literature:
  [1] J-Link User Guide
  [2] PSoC™ 6 MCU Programming Specifications (Document Number: 002-15554 https://www.infineon.com/dgdl/Infineon-PSoC_6_Programming_Specifications-Programming%20Specifications-v12_00-EN.pdf?fileId=8ac78c8c7d0d8da4017d0f66d9bf5627)

Additional information:
  For more information about public functions that can be implemented in order to customize J-Link actions, please refer to [1]
*/

/*********************************************************************
*       Constants (similar to defines)
**********************************************************************
*/


/* --- Misc. --- */
__constant int _STATUS_OK                   = 0;  // Function return status: O.K.
__constant int _STATUS_ERR                  = -1; // Function return status: Error

/* Device family defines */
__constant U16 _PSOC6_UNKNOWN_FAMILY        = 0;
__constant U16 _PSOC6_1M_FAMILY             = 0x100;
__constant U16 _PSOC6_2M_FAMILY             = 0x102;
__constant U16 _PSOC6_512K_FAMILY           = 0x105;
__constant U16 _PSOC6_256K_FAMILY           = 0x10E;

/* Si ID defines */
__constant U32 _SIID_ADDR                   = 0x16000000;
__constant U32 _SIID_MASK                   = 0xFFFF0000;
__constant U8  _SIID_SHIFT                  = 16;
__constant U32 _SIID_REV_MASK               = 0x0000FF00;
__constant U8  _SIID_REV_SHIFT              = 8;
__constant U32 _FAMILY_ADDR                 = 0x1600000C;
__constant U32 _FAMILY_MASK                 = 0x00000FFF;
__constant U8  _FAMILY_SHIFT                = 0;
__constant U32 _FB_VER_HI_ADDR              = 0x16002004;
__constant U32 _FB_VER_LO_ADDR              = 0x16002018;
__constant U32 _SFLASH_SVN_VER_ADDR         = 0x16000028;
__constant U32 _1M_CPUSS_PROT_REG           = 0x40210500;
__constant U32 _2M_CPUSS_PROT_REG           = 0x402020C4;

/*********************************************************************
*       Static data
*********************************************************************/

U32 _CPUSS_CM0_VTBASE_ADDR;  // Vector table base address for CM0+ core
/* Si Family ID value */
U16 _familyID;
U8 _FAMILY_TPINS_VARIANT;
/* Si Id related variables */
U16 _SI_ID;
U8 _SI_REV;
U16 _SI_FAMILY;
U32 _FB_VER_LO;
U32 _FB_VER_HI;
U32 _SFLASH_SVN_VER;
U32 _PROTECTION;

char *_DELIM_STR      = "****************************************************";
char *_SIID_STR       = "** Silicon: 0x0000, Family: 0x000, Rev.: 0x00 (  )";
char *_FB_STR         = "** Flash Boot version: 0                            ";
char *_SFLASH_STR     = "** SFlash version: 0                                ";
char *_PROTECTION_STR = "** Chip Protection: X                               ";
const char _HEX_STR[] = { 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46 };
__constant U8 _SIID_STR_POS = 14;
__constant U8 _SIID_FAMILY_STR_POS = 30;
__constant U8 _SIID_REV_STR_POS = 43;
__constant U8 _SIID_REV_DECODED_STR_POS = 47;
__constant U8 _FB_STR_POS = 23;
__constant U8 _SFLASH_STR_POS = 19;
__constant U8 _PROTECTION_STR_POS = 20;

/*********************************************************************
*  Replace single character at given position
*  Return the position of next character
*/
char *ReplaceChar(char *pos, char ch) {
  *pos = ch;
  pos += 1;
  return pos;
}

/*********************************************************************
*  Replace substring at given position
*  Return the position next of the last character replaced
*/
char *ReplaceSubStr(char *pos, char *sub) {
  while (*sub != 0) {
    *pos = *sub;
    pos += 1;
    sub += 1;
  }
  return pos;
}


/*********************************************************************
*  Replace substring at given position by decimal number
*  Return the position next of the last character replaced
*/
char *WriteDecStr(char *pos, U32 value, U8 digitnum) {
  U8 digitvalue;
  char ch;
  U8 decadenum;
  U32 decadeunit;
  int firstnonzero;
  U8 i;

  decadenum = 10;
  firstnonzero = 0;

  while (decadenum > 0 ) {
    digitvalue = 0;
    i = decadenum;
    decadeunit  = 1;
    while (i > 1) {
      decadeunit *= 10;
      i -= 1;
    }

    while (value >= decadeunit) {
      digitvalue += 1;
      value -= decadeunit;
    }
    if (digitvalue != 0) {
      firstnonzero = 1;
    }
    if ((firstnonzero != 0) || (digitnum >= decadenum)) {
      ch = _HEX_STR[digitvalue];
      pos = ReplaceChar(pos, ch);
    }

    decadenum -= 1;
  }
  return pos;
}


/*********************************************************************
*  Replace substring at given position by hex string
*  Return the position next of the last character replaced
*/
char *WriteHexStr(char *pos, U32 value, U8 digitnum) {
  U8 digitvalue;
  char ch;
  while (digitnum > 0) {
    digitnum -= 1;
    digitvalue = (value >> (digitnum * 4)) & 0x0F;
    ch = _HEX_STR[digitvalue];
    pos = ReplaceChar(pos, ch);
  }
  return pos;
}

/*********************************************************************
*  Get Si identification details
*
*  Return value
*    >= 0  O.K.
*    <  0  Error
*/
int GetSiID(void) {
  U32 v;
  char ch;
  U8 b0;
  U8 b1;
  U8 b2;
  U16 b3;
  U16 patch;
  U16 build;
  char *pos;

  // Si Id, Family & Rev.
  v = JLINK_MEM_ReadU32(_SIID_ADDR);
  _SI_ID = (v & _SIID_MASK) >> _SIID_SHIFT;
  _SI_REV = (v & _SIID_REV_MASK) >> _SIID_REV_SHIFT;
  v = JLINK_MEM_ReadU32(_FAMILY_ADDR);
  _SI_FAMILY = (v & _FAMILY_MASK) >> _FAMILY_SHIFT;

  WriteHexStr(_SIID_STR + _SIID_STR_POS, _SI_ID, 4);
  WriteHexStr(_SIID_STR + _SIID_FAMILY_STR_POS, _SI_FAMILY, 3);
  WriteHexStr(_SIID_STR + _SIID_REV_STR_POS, _SI_REV, 2);
  // revision major
  v = (_SI_REV >> 4) & 0x0F;
  if (v == 0) {
    ch = 0x2A; // '*' symbol
  }
  else {
    ch = 0x40 + v;
  }
  pos = _SIID_STR + _SIID_REV_DECODED_STR_POS;
  pos = ReplaceChar(pos, ch);
  // revision minor
  v = _SI_REV & 0x0F;
  if (v == 0) {
    ch = 0x2A; // '*' symbol
  }
  else {
    ch = _HEX_STR[v - 1];
  }
  pos = ReplaceChar(pos, ch);

  // FB
  _FB_VER_HI = JLINK_MEM_ReadU32(_FB_VER_HI_ADDR);
  if (_FB_VER_HI == 0) {
    Report("Error: Invalid FlashBoot: High version word of Flash Boot is zero");
    return _STATUS_ERR;
  }
  _FB_VER_LO = JLINK_MEM_ReadU32(_FB_VER_LO_ADDR);

  b0 = _FB_VER_HI >> 28;
  b1 = (_FB_VER_HI >> 24) & 0x0F;
  b2 = (_FB_VER_HI >> 16) & 0xFF;
  b3 = _FB_VER_HI & 0x0000FFFF;

  if (b0 > 2) {
    Report1("Error: Unsupported Flash Boot Version - Flash Boot Version [31:28] = ", b0);
    return _STATUS_ERR;
  }

  if (b3 != 0x8001) {
    Report("Error: Flash Boot is corrupted or non Flash Boot image programmed");
    return _STATUS_ERR;
  }

  pos = _FB_STR + _FB_STR_POS;
  if (b0 == 0) { // Versioning scheme #1 or #2, PSoC6A-BLE-2 device family
    pos = ReplaceSubStr(pos, "1.");
    if (b1 == 1) { // Versioning scheme #1, ** or *A
      pos = WriteDecStr(pos, b2, 2);
    }
    if (b1 == 2) {
      if (b2 < 20) {
        pos = ReplaceSubStr(pos, "0.0.");
        pos = WriteDecStr(pos, b2, 1);
      }
      else {
        if ( b2 < 29 ) {
          pos = ReplaceSubStr(pos, "0.1.");
          pos = WriteDecStr(pos, b2, 1);
        }
        else {
          pos = ReplaceSubStr(pos, "20.1.");
          pos = WriteDecStr(pos, b2, 1);
        }
      }
    }
  }
  if (b0 == 1) { // TVII-BE-1M **
    pos = ReplaceSubStr(pos, "2.0.0.");
    pos = WriteDecStr(pos, b2, 1);
  }
  if (b0 == 2) { // Versioning scheme #3
    patch = _FB_VER_LO >> 24;
    build = _FB_VER_LO & 0x0000FFFF;
    pos = WriteDecStr(pos, b1, 1);
    pos = ReplaceSubStr(pos, ".");
    pos = WriteDecStr(pos, b2, 1);
    pos = ReplaceSubStr(pos, ".");
    pos = WriteDecStr(pos, patch, 1);
    pos = ReplaceSubStr(pos, ".");
    pos = WriteDecStr(pos, build, 1);
  }
  pos = ReplaceChar(pos, 0);

  // SFLASH
  _SFLASH_SVN_VER = JLINK_MEM_ReadU32(_SFLASH_SVN_VER_ADDR);
  pos = _SFLASH_STR + _SFLASH_STR_POS;
  pos = WriteDecStr(pos, _SFLASH_SVN_VER, 1);
  pos = ReplaceChar(pos, 0);

  // LCS
  if (_SI_FAMILY == _PSOC6_1M_FAMILY) {
    _PROTECTION = JLINK_MEM_ReadU32(_1M_CPUSS_PROT_REG);
  }
  else {
    _PROTECTION = JLINK_MEM_ReadU32(_2M_CPUSS_PROT_REG);
  }
  pos = _PROTECTION_STR + _PROTECTION_STR_POS;
  if (_PROTECTION == 1) {
    pos = ReplaceSubStr(pos, "VIRGIN");
  }
  else {
    if (_PROTECTION == 2) {
      pos = ReplaceSubStr(pos, "NORMAL");
    }
    else {
      if (_PROTECTION == 3) {
        pos = ReplaceSubStr(pos, "SECURE");
      }
      else {
        if (_PROTECTION == 4) {
          pos = ReplaceSubStr(pos, "DEAD");
        }
        else {
          pos = ReplaceSubStr(pos, "UNKNOWN");
        }
      }
    }
  }
  pos = ReplaceChar(pos, 0);

  return _STATUS_OK;
}

/*********************************************************************
*       Global functions
*********************************************************************/

/*********************************************************************
*  Called before InitTarget(). Mainly used to set some global DLL variables to customize the normal connect procedure.
*  For ARM CoreSight devices this may be specifying the base address of some CoreSight components (ETM, ...)
*  that cannot be automatically detected by J-Link due to erroneous ROM tables etc.
*  May also be used to specify the device name in case debugger does not pass it to the DLL.
*
*  Notes
*    (1) May not, under absolutely NO circumstances, call any API functions that perform target communication.
*    (2) Should only set some global DLL variables
*/
int ConfigTargetSettings(void) {
  //
  // Mark a specific memory region as memory type illegal
  // in order to make sure that the software is not allowed to access these regions
  //
  // Note: This does not work for J-Flash tool
  //

  // Exclude SFLASH regions
  JLINK_ExecCommand("map region 0x16000000-0x160007FF XI"); // [SFLASH Start - User Data Start]
  JLINK_ExecCommand("map region 0x16001000-0x160019FF XI"); // [User Data End - NAR Start]
  JLINK_ExecCommand("map region 0x16001C00-0x160059FF XI"); // [NAR End - Public Key Start]
  JLINK_ExecCommand("map region 0x16006600-0x16007BFF XI"); // [Public Key End - TOC2 Start]

  // Exclude Cy Metadata
  JLINK_ExecCommand("map region 0x90300000-0x903FFFFF XI"); // Cy Checksum
  JLINK_ExecCommand("map region 0x90500000-0x905FFFFF XI"); // Cy Metadata

  Report("********************************************");
  Report("JLinkScript: ConfigTargetSettings for PSoC6 Cortex-M0+");
  JLINK_CORESIGHT_AddAP(0, CORESIGHT_AHB_AP);  // SYSAP
  JLINK_CORESIGHT_AddAP(1, CORESIGHT_AHB_AP);  // AHB-AP used to connect to M0+ core
  JLINK_CORESIGHT_AddAP(2, CORESIGHT_AHB_AP);  // AHB-AP used to connect to M4 core
  CORESIGHT_IndexAHBAPToUse = 1;
  CPU=CORTEX_M0;
  JLINK_ExecCommand("SetETBIsPresent = 1");
  Report("********************************************");
  return _STATUS_OK;
}

/*********************************************************************
*
*       SetupTarget()
*
*  Function description
*    If present, called after InitTarget() and after general debug connect sequence has been performed by J-Link.
*    Usually used for more high-level CPU debug setup like writing certain memory locations, initializing PLL for faster download etc.
*
*  Return value
*    >= 0:  O.K.
*     < 0:  Error
*
*  Notes
*    (1) Does not replace any DLL functionality but extends it.
*    (2) May use MEM_ API functions
*/
int SetupTarget(void) {
  GetSiID();
  Report(_DELIM_STR);
  Report(_SIID_STR);
  Report(_FB_STR);
  if ((_SFLASH_SVN_VER != 0) && (_SFLASH_SVN_VER != 0xFFFFFFFF)) {
    Report(_SFLASH_STR);
  }
  Report(_PROTECTION_STR);
  Report(_DELIM_STR);

  return _STATUS_OK;
}

/*************************** end of file ****************************/
